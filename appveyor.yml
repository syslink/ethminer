version: "{build}"
branches:
  only:
    - master
    - /v\d+\..+/
    - /release.*/
    - appveyor
    - hunter
clone_depth: 100
os: "Visual Studio 2017"
environment:
  matrix:
    - CUDA_VER: "8.0"
    - CUDA_VER: "9.1"
    - CUDA_VER: "10.0"
  HUNTER_CACHE_TOKEN:
    secure: VnpF1MH5MEFvUI5MiMMMFlmbDdst+bfom5ZFVgalYPp/SYDhbejjXJm9Dla/IgpC

cache:
  - C:\CUDA\v8.0 -> appveyor.yml
  - C:\CUDA\v9.1 -> appveyor.yml
  - C:\CUDA\v10.0 -> appveyor.yml

# Download CUDA Windows installer (local) and extract /compiler/* to /CUDA/vX.0/ zip archive.
install: |
  git submodule update --init --recursive
  if "%CUDA_VER%" == "8.0" set CUDA_ARCHIVE=cuda_8.0.61_windows-exe
  if "%CUDA_VER%" == "9.1" set CUDA_ARCHIVE=cuda_9.1.85_windows
  if "%CUDA_VER%" == "10.0" set CUDA_ARCHIVE=cuda_10.0.130_411.31_windows
  if NOT EXIST C:\CUDA\v%CUDA_VER% (if "%CUDA_VER%" NEQ "8.0" curl -L https://developer.nvidia.com/compute/cuda/%CUDA_VER%/Prod/local_installers/%CUDA_ARCHIVE% -o %CUDA_ARCHIVE%.exe)
  if NOT EXIST C:\CUDA\v%CUDA_VER% (if "%CUDA_VER%" == "8.0" curl -L https://developer.nvidia.com/compute/cuda/8.0/Prod2/local_installers/cuda_8.0.61_windows-exe -o %CUDA_ARCHIVE%.exe)
  if NOT EXIST C:\CUDA mkdir C:\CUDA
  if NOT EXIST C:\CUDA\v%CUDA_VER% (if "%CUDA_VER%" NEQ "8.0" 7z x %CUDA_ARCHIVE%.exe -oC:\CUDA nvcc/* nvrtc*/*)
  if NOT EXIST C:\CUDA\v%CUDA_VER% (if "%CUDA_VER%" == "8.0" 7z x %CUDA_ARCHIVE%.exe -oC:\CUDA compiler/* nvrtc*/*)
  if NOT EXIST C:\CUDA\v%CUDA_VER% (if "%CUDA_VER%" NEQ "8.0" rename C:\CUDA\nvcc v%CUDA_VER%)
  if NOT EXIST C:\CUDA\v%CUDA_VER% (if "%CUDA_VER%" == "8.0" rename C:\CUDA\compiler v%CUDA_VER%)

  set PATH=C:\Python36-x64;C:\Python36-x64\Scripts;%PATH%;C:\CUDA\v%CUDA_VER%\bin
  pip install requests gitpython
  nvcc -V

build_script:
  - call "%ProgramFiles(x86)%\Microsoft Visual Studio\2017\Community\Common7\Tools\VsMSBuildCmd.bat"
  - set CMAKE_ARGS=-G "Visual Studio 15 2017 Win64" -H. -Bbuild -DETHASHCUDA=OFF -DAPICORE=ON -DHUNTER_JOBS_NUMBER=%NUMBER_OF_PROCESSORS%
  - if "%CUDA_VER%" NEQ "10.0" set CMAKE_ARGS=%CMAKE_ARGS% -T v140
  - cmake %CMAKE_ARGS%
  - cmake --build build --config Release --target package
  - ps: |
      . build/ethminer/buildinfo.ps1
      mv build/ethminer.zip build/$env:project_name-$env:project_version-cuda$env:CUDA_VER-$env:system_name-$env:system_processor.zip

artifacts:
  - path: build/ethminer-*.zip
    name: ethminer

deploy:
  # Create GitHub release, also set the release name and description.
  provider: GitHub
  tag: $(appveyor_repo_tag_name)
  release: "$(project_name) $(project_version)"
  description: ""
  force_update: true  # Force update in case Travis CI created the release before.
  prerelease: $(project_version_is_prerelease)
  draft: false
  artifact: ethminer
  auth_token:
    secure: PWiAdErCyhG2+iHgJ70+obRwCKVV044pLWON6zsK+GsfL4RXnNljVvVlHTZGOx+bBiAls5kr5G8y/6aDzQWLzQnFb++naOJzg4srZQu4FGzIo3QO93eazAKVvq5J5vj0TuEho+phOJPdkRDbFZU4EYaBXAr3dkBg/y7akqBa7lbcKVsC4dC5UBHZbvjiP6FOH/DJZfMEcvC9wWVL2e+AUCxVFD5Z0URKWvYQ6d4Y2d6AQvWSFB5ATPA2XeCnPLBIh+pWyfQKJIedjHZWcTImpsNJtDtcjLDZkpKA0BwvYpZngk+dV72G2vORDm5ax64b/iwdXO5t3tofAaDnKh60KtgK1/JMxt0rZ6bQ7eccMD+SBcu2x9yjVWmaILM9uEl17rBDnIf8qDqoRsOaiWAbEWw3BPCB67JIoGdRZ2tzPBxD6are5EKlgmi9QzfN7Vy01hPXZazrLKJFb6QapcgJzNMZw2r+nbSE1TDLGTk/3Qa5NkUrBgEvyvYUgeva5m3ldN/3rdv0aBQon7QJgvWExmsUVHVNfhF8dGpp+uDISFWoyz/EvD1ZnuTgMTOsqvra+B+nWsFbw0oLV9OzgNMNRdcfTDfwYGeXga6fK9gOy+PKBCIFib04gcuaimJd0V0rKtqK+yakreY5XRd+3LQ07/rW+7Fx6SyAj20xdaeBRHE=
  on:
    appveyor_repo_tag: true
